import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.pipeline import make_pipeline
import seaborn as sns



mpg_df = pd.read_csv("/auto-mpg.csv")  # Replace with your file path

# Drop non-numeric columns if necessary
mpg_df.drop(columns=['car name'], inplace=True, errors='ignore')  # Ensure only numeric data remains
mpg_df.dropna(inplace=True)  # Drop missing values

# Convert horsepower to float if necessary
mpg_df['horsepower'] = pd.to_numeric(mpg_df['horsepower'], errors='coerce')
mpg_df.dropna(inplace=True)

X_mpg = mpg_df[['horsepower']]
y_mpg = mpg_df['mpg']

X_train, X_test, y_train, y_test = train_test_split(X_mpg, y_mpg, test_size=0.2, random_state=42)

# Polynomial Regression (Degree 2)
from sklearn.pipeline import Pipeline
poly_model = Pipeline([
    ("poly_features", PolynomialFeatures(degree=2)),
    ("linear_regression", LinearRegression())
])
#poly_model = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())
poly_model.fit(X_train, y_train)
y_pred_poly = poly_model.predict(X_test)

print("Polynomial Regression - Custom Auto MPG Dataset")
print("Mean Squared Error:", mean_squared_error(y_test, y_pred_poly))
print("R2 Score:", r2_score(y_test, y_pred_poly))

# Visualization
X_range = np.linspace(X_test.min(), X_test.max(), 100).reshape(-1, 1)
y_range_pred = poly_model.predict(X_range)
plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.plot(X_range, y_range_pred, color='red', linewidth=2, label='Predicted')
plt.xlabel("Horsepower")
plt.ylabel("MPG")
plt.title("Polynomial Regression on Custom Auto MPG Data")
plt.legend()
plt.show()
